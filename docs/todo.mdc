---
description: 
globs: 
alwaysApply: false
---

# Chest Tracker Correction Tool - Todo List

## Current Status

We are planning a major rework of the application to address issues with:
- Inconsistent correction application
- Redundant UI tabs and wasted space
- Inefficient validation/correction management
- Confusing workflow
- Outdated visual design
- Incomplete fuzzy matching implementation

## Recent Completed Work

### Configuration Management Improvements (COMPLETED)
- [x] Implemented consolidated path structure in ConfigManager
- [x] Added migration mechanism to convert old configs to new structure
- [x] Created get_path and set_path methods for consistent path handling
- [x] Updated all file loading/saving code to use the new path API
- [x] Fixed multiple correction list processing issues by centralizing path handling
- [x] Updated Dashboard and CorrectionRulesTable to use the consolidated paths
- [x] Added proper migration on application startup
- [x] Enhanced path redirection for backward compatibility
- [x] Fixed redundant loading of configuration files
- [x] Updated all file dialogs to use consistent directory handling
- [x] Created standard directory structure for all file types

## Rework Implementation Plan

### Phase 1: Preliminary Cleanup
- [x] Remove redundant tabs (simplify to single view)
- [x] Remove Preview panel functionality
- [x] Create stubs for new UI components:
  - [x] `FileImportWidget` - Compact widget for file import in dashboard sidebar
  - [x] `StatisticsWidget` - Shows statistics and status in sidebar
  - [x] `ActionButtonGroup` - Group of action buttons in dashboard
  - [x] `ValidationStatusIndicator` - Shows validation status and count
  - [x] `EnhancedTableView` - Table with advanced features
  - [x] `CorrectionManagerPanel` - Panel for managing correction rules
  - [x] `ValidationRuleEditor` - Editor for validation rules
  - [x] `ValidationListWidget` - Widget for managing validation lists
  - [x] `Dashboard` - Main dashboard component
- [x] Update `FileImportWidget` to auto-load correction lists by default
- [x] Enhance `CorrectionManagerPanel` to include correction list selection and toggle options
- [x] Ensure proper state sharing between components for correction lists
- [x] Update all components to handle correction lists automatically similar to validation files
- [x] Audit existing signal connections to identify conflicts

### Phase 2: Dashboard Redesign (COMPLETED)
- [x] Restructure dashboard layout:
  - [x] Create new `QSplitter` layout for dashboard
  - [x] Compact left sidebar with import controls and statistics
  - [x] Main area with enhanced table view
  - [x] Update MainWindow to use new Dashboard class
  - [x] Include default correction list loading in the `FileImportWidget`
  - [x] Add correction list status indicator in the `FileImportWidget`
  - [x] Include toggle for correction list application in the `ActionButtonGroup`
- [x] Implement table improvements:
  - [x] Color coding for validation errors
  - [x] In-place editing of table cells
  - [x] Context menu for quick corrections
  - [x] Custom delegates for specialized cells
  - [x] Cell navigation with keyboard shortcuts
  - [x] Ensure `CorrectionStatusIndicator` shows the state of the correction list
- [x] Fix correction application issues:
  - [x] Ensure corrections are properly applied
  - [x] Add logging of applied corrections
  - [x] Handle edge cases and errors

### Phase 3: Correction Manager Implementation
- [x] Create new "Correction Manager" tab
- [x] Implement split layout:
  - [x] Left side (50%): Correction rules table
  - [x] Right side (50%): Validation lists sections
- [x] Correction rules section:
  - [x] Two-column table (Fromâ†’To)
  - [x] Add, Edit, Delete buttons
  - [x] Import/Export functionality
  - [x] Search filter
  - [ ] Dropdown selection for validation lists when editing
  - [x] Toggle for enabling/disabling individual correction rules
  - [x] Default loading of correction lists
  - [x] Global toggle for enabling/disabling all corrections
- [x] Validation lists sections:
  - [x] Create compact table views for all three lists
  - [ ] Implement direct editing of entries
  - [ ] Add import/export buttons for each list
  - [ ] Create unified controls section at the bottom

### Phase 4: Fuzzy Matching Implementation
- [x] Enhance ValidationList class:
  - [x] Modify `is_valid()` method to support fuzzy matching based on settings
  - [x] Add field to track matching method (exact, case-insensitive, fuzzy)
  - [x] Add confidence score for fuzzy matches
- [x] Connect validation strictness setting to ValidationList behavior:
  - [x] Update settings panel to apply strictness to validation
  - [x] Implement proper handling of "Relaxed (Fuzzy match)" mode
- [x] Add fuzzy matching controls to UI:
  - [x] Create fuzzy matching toggle in sidebar
  - [x] Add threshold slider with visual feedback
  - [x] Implement save/load of fuzzy settings in config
- [x] Enhance validation view:
  - [x] Show confidence scores for fuzzy matches
  - [x] Use different highlight colors for exact vs. fuzzy matches
  - [x] Add tooltips with match details
- [x] Implement fuzzy correction suggestions:
  - [x] Suggest corrections based on fuzzy matches
  - [x] Allow one-click application of suggestions
  - [x] Display confidence scores for suggestions

### Phase 5: Configuration Management (COMPLETED)
- [x] Create consolidated path structure in ConfigManager:
  - [x] Implement a "Paths" section for all file paths
  - [x] Add standard directories (data, input, output, etc.)
  - [x] Define default files (correction_rules, validation lists, etc.)
  - [x] Implement last used paths for user convenience
- [x] Implement backward compatibility:
  - [x] Create redirection mechanism for legacy config entries
  - [x] Add migration functionality to update old configs
  - [x] Ensure existing code still works with new structure
- [x] Create path utility methods:
  - [x] Implement get_path method with fallback support
  - [x] Create set_path method that updates all related paths
  - [x] Add support for legacy path retrieval
- [x] Update all components to use new config API:
  - [x] Modify Dashboard class to use consolidated paths
  - [x] Update CorrectionRulesTable to use the path API
  - [x] Update ValidationListWidget to use the path API
  - [x] Fix file dialogs to use consistent directory handling
- [x] Add automatic directory creation for missing paths
- [x] Implement proper error handling for file operations
- [x] Add default directory structure creation on first run
- [x] Fix multiple correction list processing issues

### Phase 6: Drag-and-Drop Functionality
- [ ] Implement drag-and-drop from validation lists to correction rules
- [ ] Enable drag-and-drop between validation lists
- [ ] Add visual cues for drag operations
- [ ] Implement confirmation dialog for creating new entries

### Phase 7: Filter Improvements
- [ ] Create dropdown filters populated from validation lists
- [ ] Implement multi-select filtering
- [ ] Add search functionality to filters
- [ ] Ensure filter state persists between app restarts

### Phase 8: Visual Design Updates
- [x] Define new color scheme with golden accents
- [x] Create consistent button styling
- [x] Redesign tables with modern aesthetics
- [x] Implement proper spacing and alignment
- [x] Reduce excessive black backgrounds
- [x] Add subtle animations for state changes
- [x] Create custom styled scrollbars
- [x] Design improved icons for actions
- [x] Implement vertical sidebar menu on the left

### Phase 9: State Management & Consistency
- [x] Refactor validation/correction workflow
- [x] Implement automatic validation on data load
- [x] Ensure consistent state sharing between components
- [x] Add clear user feedback for all operations
- [x] Implement proper error handling with user-friendly messages
- [x] Create consistent configuration saving/loading
- [x] Auto-save correction list state and preferences

### Phase 10: Testing & Polishing
- [ ] Test entire workflow with real data
- [ ] Identify and fix edge cases
- [ ] Optimize performance for large datasets
- [x] Add logging for troubleshooting
- [ ] Final UI adjustments

### Phase 11: Data Management Rework

## Prerequisites
- [x] Analysis of current data management
- [x] Planning new architecture
- [x] Analysis of circular dependencies

## Identified Circular Dependencies
We have identified the following circular dependency chain:
1. `src/models/validation_list.py` imports `src/services/config_manager.py`
2. `src/services/__init__.py` imports `src/services/service_factory.py`
3. `src/services/service_factory.py` imports UI adapters from `src/ui/adapters/dataframe_adapter.py`
4. `src/ui/__init__.py` imports `src/ui/main_window.py`
5. `src/ui/main_window.py` imports `src/models/validation_list.py`

## Implementation Steps
- [x] Create `DataFrameStore` class for centralized data management
- [x] Implement event system for change notifications
- [x] Implement transaction support for batch operations
- [x] Add caching for performance optimization
- [x] Create `FileService` for file operations
  - [x] Add robust file format handling for entries
  - [x] Implement flexible CSV parsing for correction rules
- [x] Create `CorrectionService` for applying corrections
- [x] Create `ValidationService` for validating entries
- [x] Create UI adapters for connecting DataFrame to UI components
- [x] Create standalone demo script
- [x] Create integration test for real-world usage
  - [x] Fix file loading to handle entries without empty line separators
  - [x] Fix file saving to maintain the correct format
  - [x] Enhance CSV parsing to handle various correction rule formats
- [x] Refactor `MainWindow` to use new services
  - [x] Connect UI components to adapters
  - [x] Replace direct data manipulations with service calls
  - [x] Subscribe to `DataFrameStore` events
  - [x] Implement bridge methods for backward compatibility
- [ ] Resolve circular dependencies
  - [x] Create new `src/interfaces` package with interface classes
    - [x] `IDataStore` - Interface for the data store
    - [x] `IFileService` - Interface for file operations
    - [x] `ICorrectionService` - Interface for correction operations
    - [x] `IValidationService` - Interface for validation operations
    - [x] `IConfigManager` - Interface for configuration management
    - [x] Interface for UI adapters
  - [x] Modify `ValidationList` class to use interfaces instead of concrete implementations
  - [x] Update service factory to use interfaces
    - [x] Implement IServiceFactory interface
    - [x] Add dependency injection support with register_service/resolve_service methods
    - [x] Return interface types from getter methods
  - [x] Create `AppBootstrapper` class to handle initialization
    - [x] Implement service initialization in correct order
    - [x] Add registration of core services
    - [x] Create interfaces for UI adapters
  - [x] Create ValidationListComboAdapter that implements IComboBoxAdapter
  - [x] Create EntryTableAdapter that implements ITableAdapter
  - [x] Create CorrectionRuleTableAdapter that implements ITableAdapter
  - [x] Restructure package __init__.py files to avoid creating circular references
    - [x] Update src/models/__init__.py with lazy loading
    - [x] Update src/ui/__init__.py with lazy loading 
    - [x] Update src/services/__init__.py with lazy loading
    - [x] Verify no circular dependencies remain
  - [x] Create boostrapper test script to verify initialization works
  - [x] Create run_interface_app.py script to run the application with new architecture
  - [x] Update main UI components to use interface implementations
  - [x] Create comprehensive test suite for interface architecture
  - [x] Clean up interface duplication in the interfaces directory

## Verification Checklist
- [x] Core classes implemented
- [x] Services functional
- [x] Transaction support functional
- [x] Standalone demo working
- [x] Adapter pattern verified
- [x] Integration test working with real data
- [x] MainWindow refactored to use new services
- [x] Circular dependencies resolved
- [ ] All features integrated with UI
- [ ] Tests passing
- [ ] Performance benchmarks met
- [ ] Documentation updated

## Status
- Started: 2025-03-18
- Current Status: In Progress
- Blocking Issues: Circular dependencies preventing direct usage of the refactored MainWindow
- Next Steps:
  - Implement interface-based architecture to resolve circular dependencies
  - Complete integration with existing UI
  - Add comprehensive tests
  - Update documentation

## Integration Strategy
1. [x] Replace direct data access with service calls
2. [x] Connect UI components to adapters
3. [x] Refactor UI components to use the event system
4. [ ] Resolve circular dependencies with interface-based architecture
5. [ ] Add proper error handling
6. [ ] Optimize performance

## Next Tasks
- [x] Create interfaces package to resolve circular dependencies
  - [x] Define all necessary interfaces
  - [x] Update existing imports to use interfaces where possible
  - [x] Create proper interface documentation
- [x] Complete ValidationList refactoring
  - [x] Update ValidationList to accept IConfigManager
  - [x] Test circular dependency resolution
  - [x] Fix any remaining import issues
- [x] Implement dependency injection for key components
  - [x] Add dependency injection support to ServiceFactory
  - [x] Create AppBootstrapper for initialization
  - [x] Create new adapter implementations
- [ ] Expand dependency injection to remaining components
  - [ ] Modify UI components to use interface references
  - [ ] Update entry point script to use AppBootstrapper
  - [ ] Create Singleton access for AppBootstrapper
- [ ] Create comprehensive test suite for new architecture
  - [ ] Unit tests for core services
  - [ ] Integration tests for data flow
  - [ ] UI component tests
- [ ] Implement error handling and user notifications
  - [ ] Create central error handling system
  - [ ] Add user-friendly error messages
  - [ ] Implement logging for all errors
- [ ] Optimize performance for large datasets
  - [ ] Profile and identify bottlenecks
  - [ ] Implement caching where appropriate
  - [ ] Add batch processing for large operations
- [ ] Update documentation with new architecture details
  - [ ] Create architecture diagram
  - [ ] Document interface contracts
  - [ ] Update code documentation
- [ ] Create user guide for the refactored application
  - [ ] Update screenshots
  - [ ] Document new features
  - [ ] Create workflow examples

## Notes
- The integration test provides a good blueprint for separating components to avoid circular references
- Circular dependencies can be resolved through a combination of interfaces, dependency injection, and lazy loading
- The standalone test modules successfully avoid circular dependencies and provide a model for restructuring
- A proper application bootstrapper would help with initializing services in the correct order

## Detailed Implementation Tasks

### Configuration Management Tasks - Phase 5 (COMPLETED)
1. [x] Create consolidated path structure in ConfigManager:
   - [x] Design a "Paths" section to centralize all file paths
   - [x] Define standard directories for application data
   - [x] Add path mappings for backward compatibility
   - [x] Implement default file paths for each file type
2. [x] Create utility methods for path management:
   - [x] Implement get_path method with fallback and redirection
   - [x] Create set_path method that updates all related paths
   - [x] Add migration functionality to convert old configs
3. [x] Update all components to use new path API:
   - [x] Modify Dashboard file loading/saving methods
   - [x] Update CorrectionRulesTable path handling
   - [x] Fix ValidationListWidget to use the new API
   - [x] Update Settings panel to use the consolidated paths
   - [x] Fix file dialogs to use consistent directories
4. [x] Implement migration and defaults:
   - [x] Add auto-migration on application startup
   - [x] Create default directory structure for new installs
   - [x] Implement fallbacks for missing configuration
   - [x] Add better error handling for file operations
5. [x] Test and validate changes:
   - [x] Verify backward compatibility with existing configs
   - [x] Test loading of correction and validation lists
   - [x] Validate directory creation and path handling
   - [x] Fix issues with multiple file loading

### Preliminary Cleanup Tasks - Phase 1 (COMPLETED)
1. [x] Update navigation panel to remove redundant tabs
2. [x] Update main window to consolidate File Management and Corrections into Dashboard
3. [x] Remove preview panel from corrector panel
4. [x] Remove preview-related settings from settings panel
5. [x] Update help documentation to remove preview-related topics
6. [x] Create basic skeleton for the new Correction Manager tab
7. [x] Update FileImportWidget to auto-load correction lists
8. [x] Modify CorrectionManagerPanel to handle correction list selection and toggles

### Dashboard Redesign Tasks - Phase 2 (COMPLETED)
1. [x] Create new `QSplitter` layout in dashboard
2. [x] Design basic `Dashboard` class structure
3. [x] Update `MainWindow` to use new Dashboard class
4. [x] Implement `FileImportWidget` functionality:
   - [x] Add file format selection
   - [x] Add file parsing capabilities
   - [x] Implement error handling
   - [x] Add visual feedback for loaded files
5. [x] Implement `StatisticsWidget`:
   - [x] Connect to dashboard data
   - [x] Update counters in real-time
   - [x] Add visual indicators for status
6. [x] Implement `ActionButtonGroup`:
   - [x] Create action handlers
   - [x] Add keyboard shortcuts
   - [x] Add tooltips and status messages
7. [x] Implement `EnhancedTableView`:
   - [x] Create `TableModel` for chest entries
   - [x] Implement custom delegates for validation
   - [x] Add in-place editing capabilities
   - [x] Create context menu with actions
   - [x] Add indicators for validation status
8. [x] Update signal connections:
   - [x] Audit existing signals for conflicts
   - [x] Add audit method in MainWindow
   - [x] Update MainWindow signals to use Dashboard
   - [x] Connect dashboard to validation panel
   - [x] Connect dashboard to reports panel
   - [x] Connect components for correction list changes
9. [x] Fix correction application issues:
   - [x] Ensure corrections are properly applied
   - [x] Add logging of applied corrections
   - [x] Handle edge cases and errors
10. [x] Test new UI:
    - [x] Test loading entries
    - [x] Test applying corrections
    - [x] Test validation
    - [x] Test exporting

### Fuzzy Matching Tasks
1. [x] Refactor `FuzzyMatcher` class:
   - [x] Improve performance for large validation lists
   - [x] Add batch processing capabilities
   - [x] Implement caching for repetitive operations
2. [x] Modify `ValidationList` class:
   - [x] Add `use_fuzzy_matching` property
   - [x] Update `is_valid()` to use `FuzzyMatcher` when appropriate
   - [x] Store match confidence scores
3. [x] Create `FuzzyMatchControls` for the sidebar:
   - [x] Enable/disable toggle
   - [x] Threshold slider
   - [x] Visual feedback for current settings
4. [x] Implement `ValidationResultsWidget`:
   - [x] Display match type (exact/fuzzy)
   - [x] Show confidence scores
   - [x] Provide correction suggestions
5. [x] Add fuzzy match indicator to table cells

### Drag-and-Drop Implementation
1. [ ] Add drag capabilities to `ValidationListWidget`
2. [ ] Implement drop handling in `CorrectionRulesTable`
3. [ ] Create visual feedback for drag operations
4. [ ] Implement confirmation dialog for new entries
5. [ ] Add inter-list drag support

### Style Implementation (COMPLETED)
1. [x] Create new stylesheet in `styles.py`
2. [x] Define custom QSS for all widgets
3. [x] Design improved button styles
4. [x] Create table styling for better visual hierarchy
5. [x] Implement golden accents for important elements
6. [x] Design custom scrollbars and selection highlighting
7. [x] Implement vertical sidebar menu on the left

### Data Management Rework Tasks - Phase 11
1. [x] Create a new `DataFrameStore` class:
   - [x] Implement dataframes for entries, correction rules, and validation lists
   - [x] Create accessor methods with proper typing
   - [x] Add transaction support for batch operations
   - [x] Implement change tracking with DataFrame operations
   - [x] Add export/import functionality with DataFrames
2. [x] Update existing services to use DataFrameStore:
   - [x] Create dedicated services for file operations, validation, and corrections
   - [x] Implement conversion methods for backward compatibility
   - [x] Add DataFrame-specific methods for efficient updates
   - [x] Create proper caching for expensive operations
3. [x] Create clear service boundaries:
   - [x] Implement FileService for handling all file operations
   - [x] Create ValidationService for centralized validation logic
   - [x] Implement CorrectionService for handling all correction operations
   - [x] Add ServiceFactory for centralized service access
4. [x] Update UI components to work with DataFrames:
   - [x] Create adapters to bridge between DataFrameStore and UI components
   - [x] Implement table models that work with DataFrames
   - [x] Create combo adapters for validation lists
   - [x] Add efficient data binding between UI and DataFrame
5. [x] Standardize data access patterns:
   - [x] Create consistent method names across components
   - [x] Implement central getters/setters in DataFrameStore
   - [x] Add proper access control with validation
   - [x] Create batch update methods for efficiency
6. [x] Simplify signal architecture:
   - [x] Replace signal chaining with event system
   - [x] Create selective update mechanism for UI components
   - [x] Implement granular change notifications
   - [x] Add proper event documentation
7. [x] Optimize for performance:
   - [x] Implement efficient filtering methods for DataFrames
   - [x] Add indexing for frequent operations
   - [x] Create caching for expensive operations
   - [x] Implement batch processing for large datasets
8. [ ] Add proper testing:
   - [x] Create demo script to verify functionality
   - [ ] Implement integration tests for data flow
   - [ ] Add benchmarking for performance evaluation
   - [ ] Create data consistency checks

## Possible Future Enhancements

- [ ] Add support for additional file formats (JSON, Excel)
- [ ] Implement advanced filtering with regex support
- [ ] Add data visualization for entry statistics
- [ ] Create a plugin system for custom correction rules
- [ ] Add support for batch processing multiple files
- [ ] Implement cloud synchronization for validation lists and rules