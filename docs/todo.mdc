---
description: 
globs: 
alwaysApply: false
---

# Chest Tracker Correction Tool - Todo List

## Current Status

We are planning a major rework of the application to address issues with:
- Inconsistent correction application
- Redundant UI tabs and wasted space
- Inefficient validation/correction management
- Confusing workflow
- Outdated visual design
- Incomplete fuzzy matching implementation

## Priority Tasks Remaining

After completing the main window cleanup, the following tasks are high priority:

### Priority 1: Complete Interface System Implementation
- [x] Finish the Event System Standardization
- [x] Complete the Dependency Injection Refinement
- [x] Add runtime behavior validation for interface contracts
- [x] Create comprehensive visual diagrams of interface relationships
  - [x] Create class diagrams for core and UI interfaces
  - [x] Create sequence diagrams for key workflows (import, validation, correction)
  - [x] Create component diagram showing application structure
  - [x] Create dependency injection diagram
  - [x] Create event system diagram

### Priority 2: Improve Configuration Management
- [x] Fix issue with missing configuration sections
- [x] Implement proactive creation of missing sections/keys
- [x] Add comprehensive tests for configuration handling
- [ ] Add configuration UI for managing application settings
- [ ] Implement user preference profiles

### Priority 3: Enhance Data Management
- [ ] Optimize DataFrameStore for large datasets
- [ ] Implement pagination for large tables
- [ ] Add transaction history for undo/redo operations
- [ ] Create visual indicators for correction applications

### Priority 4: Enhance Filtering
- [x] Create dropdown filters populated from validation lists
- [x] Implement multi-select filtering
- [x] Add search functionality to filters
- [x] Ensure filter state persists between app restarts

### Priority 5: Direct Editing of Validation Lists
- [x] Implement direct editing of validation list entries
  - Added setData and flags methods to ValidationListItemModel
  - Enabled edit triggers in ValidationListWidget
  - Added context menu for right-click editing and deletion
  - Created comprehensive tests for direct editing functionality
- [x] Add search functionality to validation lists
  - Implemented search field with live filtering
  - Added case-insensitive matching
  - Added clear button functionality
  - Created comprehensive tests for search functionality
- [x] Add import/export buttons for each list
- [x] Create unified controls section for validation lists

### Priority 6: UI Testing Framework
- [x] Create UI test directory structure
- [x] Implement UITestHelper class
- [x] Set up mock services for testing
- [x] Create base test fixtures
- [x] Implement component tests for ValidationListWidget
- [x] Implement component tests for CorrectionManagerInterface 
- [x] Create integration tests for end-to-end workflows
- [x] Set up script for running UI tests
- [ ] Set up CI/CD pipeline for UI tests
- [ ] Fix button functionality issues in UI tests
- [ ] Fix validation list display issues
- [ ] Add tests for all remaining UI components
- [ ] Create documentation for UI testing and debugging approach

## Recent Completed Work

### Interface System Implementation (COMPLETED)
- [x] Completed comprehensive documentation of the interface architecture
- [x] Created detailed visual diagrams for all aspects of the system:
  - Class diagrams for core and UI interfaces
  - Sequence diagrams for import, validation, and correction workflows
  - Component diagram showing application structure
  - Dependency injection diagram illustrating service creation and injection
  - Event system diagram showing publisher-subscriber pattern implementation
- [x] Created validation script to ensure diagrams stay in sync with code
- [x] Created diagram generation script for PNG/SVG output

### Configuration Management Improvements (COMPLETED)
- [x] Implemented consolidated path structure in ConfigManager
- [x] Added migration mechanism to convert old configs to new structure
- [x] Created get_path and set_path methods for consistent path handling
- [x] Updated all file loading/saving code to use the new path API
- [x] Fixed multiple correction list processing issues by centralizing path handling
- [x] Updated Dashboard and CorrectionRulesTable to use the consolidated paths
- [x] Added proper migration on application startup
- [x] Enhanced path redirection for backward compatibility
- [x] Fixed redundant loading of configuration files
- [x] Updated all file dialogs to use consistent directory handling
- [x] Created standard directory structure for all file types

### Interface Architecture Implementation (COMPLETED)
- [x] Created all core interfaces in the `src/interfaces` package
- [x] Updated the `ValidationList` class to accept an `IConfigManager` interface
- [x] Updated `ServiceFactory` to implement `IServiceFactory` interface
- [x] Added dependency injection support to `ServiceFactory`
- [x] Created `AppBootstrapper` to handle application initialization
- [x] Created a standalone demo script that showcases the interface architecture
- [x] Developed adapter interfaces for UI components
- [x] Updated main UI components to use interface-based design

### Main Window Cleanup (COMPLETED)
- [x] Removed legacy main window implementations (`main_window.py`, `main_window_refactor.py`)
- [x] Removed bridge classes (`main_window_bridge.py`, `dashboard_bridge.py`)
- [x] Standardized on `MainWindowInterface` as the primary UI implementation
- [x] Fixed configuration management to ensure missing sections are automatically created
- [x] Added default configuration settings for Dashboard and CorrectionManager
- [x] Updated correction rules parsing to handle legacy column formats
- [x] Fixed ValidationListWidget errors with proper attribute handling
- [x] Comprehensive testing for MainWindowInterface functionality
- [x] Updated documentation to reflect simplified architecture

## Interface System Implementation Plan

### Phase 1: Event System Standardization
- [ ] Move EventType enum to a single location in src/interfaces/events.py
- [ ] Remove duplicate EventType from dataframe_store.py
- [ ] Update all imports to use the standardized version
- [ ] Add proper type hints for event handlers and event data
- [ ] Create centralized event handling system

### Phase 2: Dependency Injection Refinement
- [ ] Refactor DataFrameStore to fully support dependency injection
- [ ] Remove get_instance() calls from all components
- [ ] Update all UI adapters to accept injected dependencies
- [ ] Enhance service registration and validation
- [ ] Prevent missing dependencies in components

### Phase 3: Interface Compliance Verification
- [x] Add interface validation tests for each service
- [x] Ensure all implementations satisfy their interfaces
- [x] Create common base classes for shared behavior
- [x] Document interface contracts with clear docstrings
- [ ] Add runtime behavior validation for interface contracts

### Phase 4: Documentation Update
- [x] Update INTERFACE_ARCHITECTURE.md with refined architecture
- [x] Document the event system standardization
- [x] Create interface usage examples for developers
- [x] Update bugfixing.mdc with lessons learned
- [x] Create comprehensive visual diagrams of interface relationships
  - [x] Class diagrams for core and UI interfaces
  - [x] Sequence diagrams for key workflows
  - [x] Component diagram showing the application structure
  - [x] Dependency injection diagram showing how services are created and injected
  - [x] Event system diagram showing the publish-subscribe architecture

## Rework Implementation Plan

### Phase 1: Preliminary Cleanup (COMPLETED)
- [x] Remove redundant tabs (simplify to single view)
- [x] Remove Preview panel functionality
- [x] Create stubs for new UI components:
  - [x] `FileImportWidget` - Compact widget for file import in dashboard sidebar
  - [x] `StatisticsWidget` - Shows statistics and status in sidebar
  - [x] `ActionButtonGroup` - Group of action buttons in dashboard
  - [x] `ValidationStatusIndicator` - Shows validation status and count
  - [x] `EnhancedTableView` - Table with advanced features
  - [x] `CorrectionManagerPanel` - Panel for managing correction rules
  - [x] `ValidationRuleEditor` - Editor for validation rules
  - [x] `ValidationListWidget` - Widget for managing validation lists
  - [x] `Dashboard` - Main dashboard component
- [x] Update `FileImportWidget` to auto-load correction lists by default
- [x] Enhance `CorrectionManagerPanel` to include correction list selection and toggle options
- [x] Ensure proper state sharing between components for correction lists
- [x] Update all components to handle correction lists automatically similar to validation files
- [x] Audit existing signal connections to identify conflicts

### Phase 2: Dashboard Redesign (COMPLETED)
- [x] Restructure dashboard layout:
  - [x] Create new `QSplitter` layout for dashboard
  - [x] Compact left sidebar with import controls and statistics
  - [x] Main area with enhanced table view
  - [x] Update MainWindow to use new Dashboard class
  - [x] Include default correction list loading in the `FileImportWidget`
  - [x] Add correction list status indicator in the `FileImportWidget`
  - [x] Include toggle for correction list application in the `ActionButtonGroup`
- [x] Implement table improvements:
  - [x] Color coding for validation errors
  - [x] In-place editing of table cells
  - [x] Context menu for quick corrections
  - [x] Custom delegates for specialized cells
  - [x] Cell navigation with keyboard shortcuts
  - [x] Ensure `CorrectionStatusIndicator` shows the state of the correction list
- [x] Fix correction application issues:
  - [x] Ensure corrections are properly applied
  - [x] Add logging of applied corrections
  - [x] Handle edge cases and errors

### Phase 3: Correction Manager Implementation
- [x] Create new "Correction Manager" tab
- [x] Implement split layout:
  - [x] Left side (50%): Correction rules table
  - [x] Right side (50%): Validation lists sections
- [x] Correction rules section:
  - [x] Two-column table (From→To)
  - [x] Add, Edit, Delete buttons
  - [x] Import/Export functionality
  - [x] Search filter
  - [x] Dropdown selection for validation lists when editing
  - [x] Toggle for enabling/disabling individual correction rules
  - [x] Default loading of correction lists
  - [x] Global toggle for enabling/disabling all corrections
- [x] Validation lists sections:
  - [x] Create compact table views for all three lists
  - [x] Implement direct editing of entries
  - [x] Add search functionality to lists
  - [x] Add import/export buttons for each list
  - [ ] Create unified controls section at the bottom

### Phase 4: Fuzzy Matching Implementation
- [x] Enhance ValidationList class:
  - [x] Modify `is_valid()` method to support fuzzy matching based on settings
  - [x] Add field to track matching method (exact, case-insensitive, fuzzy)
  - [x] Add confidence score for fuzzy matches
- [x] Connect validation strictness setting to ValidationList behavior:
  - [x] Update settings panel to apply strictness to validation
  - [x] Implement proper handling of "Relaxed (Fuzzy match)" mode
- [x] Add fuzzy matching controls to UI:
  - [x] Create fuzzy matching toggle in sidebar
  - [x] Add threshold slider with visual feedback
  - [x] Implement save/load of fuzzy settings in config
- [x] Enhance validation view:
  - [x] Show confidence scores for fuzzy matches
  - [x] Use different highlight colors for exact vs. fuzzy matches
  - [x] Add tooltips with match details
- [x] Implement fuzzy correction suggestions:
  - [x] Suggest corrections based on fuzzy matches
  - [x] Allow one-click application of suggestions
  - [x] Display confidence scores for suggestions

### Phase 5: Configuration Management (COMPLETED)
- [x] Create consolidated path structure in ConfigManager:
  - [x] Implement a "Paths" section for all file paths
  - [x] Add standard directories (data, input, output, etc.)
  - [x] Define default files (correction_rules, validation lists, etc.)
  - [x] Implement last used paths for user convenience
- [x] Implement backward compatibility:
  - [x] Create redirection mechanism for legacy config entries
  - [x] Add migration functionality to update old configs
  - [x] Ensure existing code still works with new structure
- [x] Create path utility methods:
  - [x] Implement get_path method with fallback support
  - [x] Create set_path method that updates all related paths
  - [x] Add support for legacy path retrieval
- [x] Update all components to use new config API:
  - [x] Modify Dashboard class to use consolidated paths
  - [x] Update CorrectionRulesTable to use the path API
  - [x] Update ValidationListWidget to use the path API
  - [x] Fix file dialogs to use consistent directory handling
- [x] Add automatic directory creation for missing paths
- [x] Implement proper error handling for file operations
- [x] Add default directory structure creation on first run
- [x] Fix multiple correction list processing issues

### Phase 6: Filter Improvements
- [x] Create dropdown filters populated from validation lists
- [x] Implement multi-select filtering
- [x] Add search functionality to filters
- [x] Ensure filter state persists between app restarts

### Phase 7: Visual Design Updates
- [x] Define new color scheme with golden accents
- [x] Create consistent button styling
- [x] Redesign tables with modern aesthetics
- [x] Implement proper spacing and alignment
- [x] Reduce excessive black backgrounds
- [x] Add subtle animations for state changes
- [x] Create custom styled scrollbars
- [x] Design improved icons for actions
- [x] Implement vertical sidebar menu on the left

### Phase 8: State Management & Consistency
- [x] Refactor validation/correction workflow
- [x] Implement automatic validation on data load
- [x] Ensure consistent state sharing between components

## Latest Progress

### Interface System Documentation and Visualization (Completed)

✅ All interface documentation and visualization tasks have been completed. The following have been created:

- **Class Diagrams**: Complete diagrams for core interfaces (IDataStore, IFileService, etc.) and UI adapter interfaces
- **Sequence Diagrams**: Detailed diagrams showing the interaction flow for import, validation, and correction processes
- **Component Diagram**: High-level overview of the application structure and component relationships
- **Dependency Injection Diagram**: Visualization of how the ServiceFactory creates and injects services
- **Event System Diagram**: Illustration of the publish-subscribe pattern used for component communication

Additionally, we've created:
- A validation script that ensures diagrams stay in sync with the actual code
- A diagram generation script for creating PNG/SVG versions of the diagrams (requires Java)
- Updated interface documentation with usage examples and best practices

### Next Steps

The next priorities should be:
1. **Validation List Management Enhancement**
   - Add search functionality to validation lists
   - Support importing validation lists from CSV
   - Add duplicate detection for validation entries
   - Add bulk editing capabilities

2. **Configuration UI Development**
   - Create a dedicated settings panel for application configuration
   - Implement user preference profiles
   - Add visual configuration for validation strictness

3. **Transaction and History System**
   - Add transaction support for operations
   - Implement undo/redo functionality
   - Create visual indicators for correction applications