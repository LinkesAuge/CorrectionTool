---
description: 
globs: 
alwaysApply: false
---

# Chest Tracker Correction Tool - Task List

## Current Status (May 07, 2024):
The basic UI framework has been implemented with the main window, navigation panel, and content panels. The file loading interface, correction interface, and validation list management are functional. The application can now:

1. Load text files with chest entries
2. Load CSV files with correction rules
3. Apply corrections to the entries
4. Display the entries in a table with filtering
5. Export the corrected entries to a file
6. Create, edit, and manage validation lists for players, chest types, and sources
7. Validate entries against these lists

## Bug Fixes:
1. Fixed issue with export functionality where "From:" and "Source:" prefixes were duplicated in the exported file
2. Improved robustness of text parsing to handle malformed entries

## Next Steps:
1. Complete preview mode functionality
2. Add better error handling and user feedback
3. Implement settings interface
4. Add reporting functionality

## Phase 1: Project Setup and Core Models

### Project Structure
- [x] Create src directory
- [x] Create models, services, ui, utils subdirectories
- [x] Create tests directory with sample_data subdirectory
- [x] Setup initial main.py with basic app structure
- [x] Create config.ini template

### Data Models
- [x] Implement ChestEntry class with properties:
  - chest_type, player, source
  - validation status
  - correction metadata
- [x] Implement CorrectionRule class with properties:
  - from_text, to_text
  - rule_type (exact, fuzzy)
  - priority
- [x] Implement ValidationList class with:
  - list_type (player, chest, source)
  - entries list
  - import/export methods

### Configuration Management
- [x] Create ConfigManager class:
  - Default configuration values
  - Load/save methods
  - Settings for UI, fuzzy matching, validation

### File Parsers
- [x] Implement TextParser for reading chest entries
  - Parse 3-line structure
  - Handle encoding variations
  - Extract date from filename
- [x] Implement CSVParser for correction lists
  - Read "From" and "To" columns
  - Handle quoted text
  - Support various CSV formats
- [x] Create ImportExport utilities for validation lists

## Phase 2: Core Logic

### Correction Functionality
- [x] Implement exact string replacement algorithm
- [x] Create fuzzy matching algorithm with configurable threshold
- [ ] Develop detection system for potential errors
- [x] Implement batch correction mechanism

### Validation System
- [x] Create validation mechanism for entries
- [x] Implement error highlighting logic
- [x] Add functionality to toggle validation

### File Management
- [x] Implement file loading logic for single files
- [ ] Extend to support multiple files
- [x] Develop date-based organization system
- [x] Create corrected file saving functionality

### Statistics Tracking
- [x] Implement correction counting
- [x] Create statistics generators for entries
- [ ] Add functionality to generate reports
- [x] Implement log file creation

## Phase 3: UI Framework with PySide6

### Application Window
- [x] Design main window layout with left navigation bar
- [x] Implement content area with split panels
- [x] Create theming system (dark blueish-purple with gold accents)
- [ ] Setup application icon and branding

### Navigation and Panels
- [x] Create left navigation panel with icons+text
- [x] Implement left content panel for filters/options
- [x] Create right panel for data table/view
- [x] Add tab switching functionality

### File Management UI
- [x] Design file loading interface
- [x] Implement CSV template loading UI
- [x] Create export interface for corrected files
- [ ] Add import/export for validation lists

### Correction Interface
- [x] Implement table view for chest entries
- [x] Add filtering and grouping controls
- [x] Create highlighting system for errors/corrections
- [ ] Design correction interface with batch options

### Preview Mode
- [ ] Implement toggle for raw/corrected view
- [ ] Create side-by-side comparison view
- [ ] Add highlighting for changes

## Phase 4: Advanced Features

### Validation List Management
- [x] Create UI for viewing/editing validation lists
- [x] Implement import/export functionality
- [x] Add validation toggle controls

### Reporting System
- [ ] Design statistics display in UI
- [ ] Implement summary report generation
- [ ] Create log file system

### User Settings
- [ ] Design settings interface
- [ ] Implement settings save/load
- [ ] Add UI for configuring fuzzy matching

### Help System
- [ ] Create basic help documentation
- [ ] Implement tooltips for UI elements
- [ ] Add context-sensitive help

## Phase 5: Testing and Refinement

### Sample Data
- [x] Create test input files
- [x] Develop test correction lists
- [x] Generate test validation lists

### Testing
- [x] Write tests for data models
- [ ] Create tests for correction logic
- [ ] Implement UI testing

### Performance Optimization
- [ ] Profile application performance
- [ ] Optimize file processing
- [ ] Improve UI responsiveness

### Final Polish
- [ ] Review and refine UI
- [ ] Check for edge cases
- [ ] Ensure all features are working as expected
